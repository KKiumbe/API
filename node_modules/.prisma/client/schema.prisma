// Define the database connection
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // MongoDB connection string from environment variables
}

// Generator for Prisma Client
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

// User model
model User {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  phoneNumber String  @unique
  email       String? @unique
  county      String?
  town        String?
  gender      String
  password    String // To store hashed passwords
}

// Customer model
model Customer {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  firstName            String
  lastName             String
  email                String?              @unique
  phoneNumber          String
  gender               String
  county               String?
  town                 String?
  location             String?
  category             String?
  monthlyCharge        Float
  status               CustomerStatus       @default(ACTIVE)
  garbageCollectionDay GarbageCollectionDay // Enum for days of the week
  invoices             Invoice[]            @relation("CustomerInvoices")
  receipts             Receipt[]            @relation("CustomerReceipts")
  collected            Boolean              @default(false)
  closingBalance       Float                @default(0) // Add closing balance field
}

// Enum for days of the week
enum GarbageCollectionDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

// Enum for customer status
enum CustomerStatus {
  ACTIVE
  DORMANT
}

// Invoice model
model Invoice {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId        String        @db.ObjectId
  invoicePeriod     DateTime
  invoiceNumber     String // Unique invoice number
  invoiceAmount     Float
  closingBalance    Float // To track the balance for this invoice
  status            InvoiceStatus @default(UNPAID)
  isSystemGenerated Boolean
  createdAt         DateTime      @default(now())
  amountPaid        Float         @default(0) // Track the amount paid for this invoice

  customer Customer      @relation(fields: [customerId], references: [id], name: "CustomerInvoices")
  items    InvoiceItem[] @relation("InvoiceItems")
  receipts Receipt[]     @relation("InvoiceReceipts")

  // Explicit many-to-many relationship via PaymentInvoice
  paymentInvoices PaymentInvoice[] @relation("InvoiceToPayment")
}

// Enum for invoice status
enum InvoiceStatus {
  UNPAID
  PAID
  CANCELLED
}

// InvoiceItem model
model InvoiceItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId   String @db.ObjectId
  description String
  amount      Float
  quantity    Int

  invoice Invoice @relation(fields: [invoiceId], references: [id], name: "InvoiceItems")
}

// Receipt model
model Receipt {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId    String        @db.ObjectId
  invoiceId     String        @db.ObjectId
  amount        Float
  paymentDate   DateTime      @default(now())
  modeOfPayment ModeOfPayment

  customer Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade, name: "CustomerReceipts")
  invoice  Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade, name: "InvoiceReceipts")
  payments Payment[] @relation("ReceiptPayments")
}

// Enum for payment methods
enum ModeOfPayment {
  CASH
  MPESA
  BANK
}

// Payment model
model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  paymentDate   DateTime      @default(now())
  modeOfPayment ModeOfPayment

  receiptId String  @db.ObjectId
  receipt   Receipt @relation(fields: [receiptId], references: [id], name: "ReceiptPayments", onDelete: Cascade)

  // Explicit many-to-many relationship via PaymentInvoice
  paymentInvoices PaymentInvoice[] @relation("PaymentToInvoice")
}

// MpesaTransaction model for tracking MPESA transactions separately
model MpesaTransaction {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  TransID       String
  TransTime     DateTime
  TransAmount   String
  BillRefNumber String
  MSISDN        String
  FirstName     String
  processed     Boolean  @default(false)

  createdAt DateTime @default(now())
}

// PaymentInvoice model (explicit many-to-many relation)
model PaymentInvoice {
  id        String @id @default(auto()) @map("_id") @db.ObjectId // Adding a unique ID for the PaymentInvoice model
  paymentId String @db.ObjectId
  invoiceId String @db.ObjectId

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade, name: "PaymentToInvoice")
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, name: "InvoiceToPayment")
}
