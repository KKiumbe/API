datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // MongoDB connection string from environment variables
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

model User {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  phoneNumber String  @unique
  email       String? @unique
  county      String?
  town        String?
  gender      String
  password    String // To store hashed passwords
}

model Customer {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  email         String? @unique
  phoneNumber   String
  gender        String
  county        String?
  town          String?
  location      String?
  category      String?
  monthlyCharge Float

  status CustomerStatus @default(ACTIVE)

  // New field for garbage collection day
  garbageCollectionDay GarbageCollectionDay // Enum for days of the week

  invoices Invoice[] @relation("CustomerInvoices")
  receipts Receipt[] @relation("CustomerReceipts")

  // Boolean field indicating whether trash has been collected
  collected Boolean @default(false)
}

// Enum for days of the week
enum GarbageCollectionDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

// Enum for customer status
enum CustomerStatus {
  ACTIVE
  DORMANT
}

model Invoice {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId        String        @db.ObjectId
  invoicePeriod     DateTime
  invoiceNumber     String // Unique invoice number
  invoiceAmount     Float
  closingBalance    Float
  status            InvoiceStatus @default(UNPAID) // Adjusted status with enum
  isSystemGenerated Boolean
  createdAt         DateTime      @default(now())

  customer Customer      @relation(fields: [customerId], references: [id], name: "CustomerInvoices")
  items    InvoiceItem[] @relation("InvoiceItems")
  receipts Receipt[]     @relation("InvoiceReceipts")
}

// Enum for invoice status
enum InvoiceStatus {
  UNPAID
  PAID
  CANCELLED
}

model InvoiceItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId   String @db.ObjectId // Reference to the Invoice ID
  description String // Description of the item
  amount      Float // Charge for the item
  quantity    Int // Quantity of the item

  invoice Invoice @relation(fields: [invoiceId], references: [id], name: "InvoiceItems")
}

model Receipt {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId    String        @db.ObjectId
  invoiceId     String        @db.ObjectId
  amount        Float // Amount paid
  paymentDate   DateTime      @default(now()) // Date of payment
  modeOfPayment ModeOfPayment // Enum for payment methods

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, name: "CustomerReceipts")
  invoice  Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade, name: "InvoiceReceipts")

  // Add the relation back to Payment
  payments Payment[] @relation("ReceiptPayments") // Relation to the Payment model
}

// Enum for payment methods
enum ModeOfPayment {
  CASH
  MPESA
  BANK
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  receiptId     String        @db.ObjectId // Reference to the Receipt
  amount        Float // Amount of payment
  paymentDate   DateTime      @default(now()) // Date of payment
  modeOfPayment ModeOfPayment // Enum for payment methods

  receipt Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade, name: "ReceiptPayments")
}
