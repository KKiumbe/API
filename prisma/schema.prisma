// Define the database connection
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Generator for Prisma Client
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

// User model
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  phoneNumber String   @unique
  email       String?  @unique
  county      String?
  town        String?
  gender      String
  password    String   // To store hashed passwords
}

// Customer model
model Customer {
  id                    String                @id @default(auto()) @map("_id") @db.ObjectId
  firstName             String
  lastName              String
  email                 String?               @unique
  phoneNumber           String                @unique
  secondaryPhoneNumber  String?
  gender                String
  county                String?
  town                  String?
  location              String?
  estateName            String?               // Optional estate name
  building              String?               // Optional building name
  houseNumber           String?               // Optional house number
  category              String?
  monthlyCharge         Float
  status                CustomerStatus        @default(ACTIVE)
  garbageCollectionDay  GarbageCollectionDay  // Enum for days of the week
  invoices              Invoice[]
  receipts              Receipt[]
  collected             Boolean               @default(false)  
  closingBalance        Float                 @default(0) // Add closing balance field
}

// Enum for days of the week
enum GarbageCollectionDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

// Enum for customer status
enum CustomerStatus {
  ACTIVE
  DORMANT
}

// Invoice model
model Invoice {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  customerId          String       @db.ObjectId
  invoicePeriod       DateTime
  invoiceNumber       String       @unique // Ensure uniqueness
  invoiceAmount       Float        
  closingBalance      Float        // To track balance for this invoice
  status              InvoiceStatus @default(UNPAID) 
  isSystemGenerated   Boolean    
  createdAt           DateTime     @default(now())
  amountPaid          Float        @default(0) // Track the amount paid

  customer            Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items               InvoiceItem[]
  
  // Many-to-many relation to Receipt through ReceiptInvoice
  receiptInvoices     ReceiptInvoice[] @relation("InvoiceReceipts")
}

// Enum for invoice status
enum InvoiceStatus {
  UNPAID
  PAID
  CANCELLED
}

// InvoiceItem model
model InvoiceItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId   String   @db.ObjectId 
  description String   
  amount      Float    
  quantity    Int      

  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

// Enum for payment methods
enum ModeOfPayment {
  CASH
  MPESA
  BANK
}

// Receipt model
// Receipt model
model Receipt {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  receiptNumber  String      @unique // Ensure uniqueness of the receipt number
  amount         Float
  modeOfPayment  ModeOfPayment
  paidBy         String?
  transactionCode String?
  phoneNumber    String?
  paymentId      String? @db.ObjectId @unique // Link to Payment and make it unique
  payment        Payment?   @relation(fields: [paymentId], references: [id])

  // Many-to-many relation to Invoice through ReceiptInvoice
  receiptInvoices ReceiptInvoice[] @relation("InvoiceReceipts")

  customer       Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String      @db.ObjectId
  createdAt      DateTime    @default(now())
}


// Payment model
model Payment {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  amount                  Float
  modeOfPayment           ModeOfPayment
  receipted               Boolean     @default(false)
  mpesaTransactionId      String?     @unique

  // One-to-one relationship with Receipt
  receipt                 Receipt?    
  receiptId               String?     @db.ObjectId

  // Capture when the payment was created
  createdAt               DateTime    @default(now()) // Automatically set when created
}

// MpesaTransaction model for tracking MPESA transactions separately
model MpesaTransaction {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  TransID         String       @unique     
  TransTime       DateTime    
  TransAmount     Float       
  BillRefNumber   String  
  MSISDN          String      
  FirstName       String      
  processed       Boolean     @default(false) 

  createdAt       DateTime    @default(now()) 
}

// ReceiptInvoice model (explicit many-to-many relation between Receipt and Invoice)
model ReceiptInvoice {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  receiptId   String      @db.ObjectId
  invoiceId   String      @db.ObjectId

  // Relations
  receipt     Receipt     @relation("InvoiceReceipts", fields: [receiptId], references: [id], onDelete: Cascade)
  invoice     Invoice     @relation("InvoiceReceipts", fields: [invoiceId], references: [id], onDelete: Cascade)
}
